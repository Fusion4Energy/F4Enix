from pathlib import Path

import numpy as np

from f4enix.input.ww_gvr.models import Vectors
from f4enix.input.ww_gvr.ww_parser import (
    WWHeader,
    WWHeaderCyl,
    parse,
    read_meshtally_file,
    write,
)

# ruff: noqa: PLR2004


def test_parse_simple_cart():
    expected_ww_header = WWHeader(
        if_=1,
        iv=1,
        ni=1,
        nr=10,
        probid="06/03/21 14:52:07",
        ne=[1],
        nfx=2,
        nfy=3,
        nfz=1,
        origin=[-15, -15, -15],
        ncx=1,
        ncy=1,
        ncz=1,
    )
    expected_b2_vectors = Vectors(
        vector_i=np.array([-15, 2, 15, 1]),
        vector_j=np.array([-15, 3, 16, 1]),
        vector_k=np.array([-15, 1, 20, 1]),
    )
    expected_energies = [[100.0]]
    expected_values = [[0.11576, 0.093197, 0.67316, 0.5, 0.099821, 0.0898]]

    result = parse(Path("tests") / "test_ww_gvr" / "resources" / "ww_simple_cart")

    assert expected_ww_header == result.header
    assert expected_b2_vectors == result.b2_vectors
    assert expected_energies == result.energies
    assert expected_values == result.values


def test_parse_simple_cyl():
    expected_ww_header = WWHeaderCyl(
        if_=1,
        iv=1,
        ni=1,
        nr=16,
        probid="06/04/21 17:17:28",
        ne=[1],
        nfx=2,
        nfy=3,
        nfz=1,
        origin=[0.0, 0.0, -5.0],
        ncx=1,
        ncy=1,
        ncz=1,
        director_1=[0.0, 0.0, 11.0],
        director_2=[15.0, 0.0, -5.0],
    )
    expected_b2_vectors = Vectors(
        vector_i=np.array([0.0, 2.0, 15.0, 1.0]),
        vector_j=np.array([0.0, 3.0, 16.0, 1.0]),
        vector_k=np.array([0.0, 1.0, 1.0, 1.0]),
    )
    expected_energies = [[100.0]]
    expected_values = [[0.5, 0.10463, 0.52965, 0.084479, 0.14258, 0.03275]]

    result = parse(Path("tests") / "test_ww_gvr" / "resources" / "ww_simple_cyl")

    assert expected_ww_header == result.header
    assert expected_b2_vectors == result.b2_vectors
    assert expected_energies == result.energies
    assert expected_values == result.values


def test_parse_complex_cart():
    expected_ww_header = WWHeader(
        if_=1,
        iv=1,
        ni=2,
        nr=10,
        probid="06/05/21 11:33:41",
        ne=[7, 2],
        nfx=7,
        nfy=3,
        nfz=1,
        origin=[-15.0, -15.0, -15.0],
        ncx=3,
        ncy=1,
        ncz=1,
    )
    expected_b2_vectors = Vectors(
        vector_i=np.array([-15.0, 2.0, 5.1, 1.0, 3.0, 12.2, 1.0, 2.0, 13.3, 1.0]),
        vector_j=np.array([-15.0, 3.0, 16.0, 1.0]),
        vector_k=np.array([-15.0, 1.0, 20.0, 1.0]),
    )
    expected_energies = [[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 100.0], [1.2, 2.3]]

    result = parse(Path("tests") / "test_ww_gvr" / "resources" / "ww_complex_cart")

    assert expected_ww_header == result.header
    assert expected_b2_vectors == result.b2_vectors
    assert expected_energies == result.energies
    assert 0.010889 == result.values[0][-3]


def test_read_meshtally_file_cart():
    expected_ww_header = WWHeader(
        if_=1,
        iv=1,
        ni=1,
        nr=10,
        probid="Generated by f4enix_ww",
        ne=[1],
        nfx=3,
        nfy=4,
        nfz=2,
        origin=[0, 0, 0],
        ncx=3,
        ncy=4,
        ncz=2,
    )
    expected_b2_vectors = Vectors(
        vector_i=np.array([-10.0, 1.0, 0.0, 1.0, 1.0, 10.0, 1.0, 1.0, 20.0, 1.0]),
        vector_j=np.array(
            [20.0, 1.0, 25.0, 1.0, 1.0, 30.0, 1.0, 1.0, 35.0, 1.0, 1.0, 40.0, 1.0]
        ),
        vector_k=np.array([15.0, 1.0, 20.0, 1.0, 1.0, 25.0, 1.0]),
    )
    expected_energies = [[100]]
    expected_values = [
        [
            9.45568e-05,
            9.54871e-05,
            7.67912e-05,
            7.31554e-05,
            7.30042e-05,
            6.20899e-05,
            5.71612e-05,
            5.69892e-05,
            5.00181e-05,
            4.53375e-05,
            4.50316e-05,
            4.08733e-05,
            7.70699e-05,
            7.64715e-05,
            6.40383e-05,
            6.16851e-05,
            6.22624e-05,
            5.33923e-05,
            5.00923e-05,
            5.02796e-05,
            4.46194e-05,
            4.10111e-05,
            4.10669e-05,
            3.71414e-05,
        ]
    ]

    result = read_meshtally_file(
        Path("tests") / "test_ww_gvr" / "resources" / "meshtally_cart"
    )

    assert expected_ww_header == result.header
    assert expected_b2_vectors == result.b2_vectors
    assert expected_energies == result.energies
    assert expected_values == result.values


def test_read_meshtally_file_cyl():
    expected_ww_header = WWHeaderCyl(
        if_=1,
        iv=1,
        ni=1,
        nr=16,
        probid="Generated by f4enix_ww",
        ne=[1],
        nfx=3,
        nfy=10,
        nfz=10,
        origin=[-5.00e01, -5.00e01, -5.00e01],
        ncx=3,
        ncy=10,
        ncz=10,
        director_1=[1.0, 0.0, 0.0],
        director_2=[0.0, 0.0, 1.0],
    )
    expected_b2_vec_i = np.array(
        [0.0, 1.0, 16.67, 1.0, 1.0, 33.33, 1.0, 1.0, 50.0, 1.0]
    )
    expected_energies = [[100]]

    result = read_meshtally_file(
        Path("tests") / "test_ww_gvr" / "resources" / "meshtal_cyl",  tally_id=4
    )

    assert expected_ww_header == result.header
    # TODO: In meshtal_module the first item of vector_i is modified if 0
    #  search "Paso de celdas degeneradas" to find the culprit
    assert np.allclose(expected_b2_vec_i, result.b2_vectors.vector_i)
    assert expected_energies == result.energies
    # assert expected_values == result.values


def test_write_simple_cart(tmp_path):
    ww_header = WWHeader(
        if_=1,
        iv=1,
        ni=1,
        nr=10,
        probid="06/03/21 14:52:07",
        ne=[1],
        nfx=2,
        nfy=3,
        nfz=1,
        origin=[-15, -15, -15],
        ncx=1,
        ncy=1,
        ncz=1,
    )
    b2_vectors = Vectors(
        vector_i=np.array([-15, 2, 15, 1]),
        vector_j=np.array([-15, 3, 16, 1]),
        vector_k=np.array([-15, 1, 20, 1]),
    )
    energies = [[100.0]]
    values = [[0.11576, 0.093197, 0.67316, 0.5, 0.099821, 0.0898]]

    with open(Path("tests") / "test_ww_gvr" / "resources" / "ww_simple_cart") as infile:
        expected = infile.read()

    write(tmp_path / "test.ww", ww_header, b2_vectors, energies, values)
    with open(tmp_path / "test.ww") as outfile:
        result = outfile.read()

    assert expected == result


def test_write_simple_cyl(tmp_path):
    ww_header = WWHeaderCyl(
        if_=1,
        iv=1,
        ni=1,
        nr=16,
        probid="06/04/21 17:17:28",
        ne=[1],
        nfx=2,
        nfy=3,
        nfz=1,
        origin=[0.0, 0.0, -5.0],
        ncx=1,
        ncy=1,
        ncz=1,
        director_1=[0.0, 0.0, 11.0],
        director_2=[15.0, 0.0, -5.0],
    )
    b2_vectors = Vectors(
        vector_i=np.array([0.0, 2.0, 15.0, 1.0]),
        vector_j=np.array([0.0, 3.0, 16.0, 1.0]),
        vector_k=np.array([0.0, 1.0, 1.0, 1.0]),
    )
    energies = [[100.0]]
    values = [[0.5, 0.10463, 0.52965, 0.084479, 0.14258, 0.03275]]

    with open(Path("tests") / "test_ww_gvr" / "resources" / "ww_simple_cyl") as infile:
        expected = infile.read()

    write(tmp_path / "test.ww", ww_header, b2_vectors, energies, values)
    with open(tmp_path / "test.ww") as outfile:
        result = outfile.read()

    assert expected == result


def test_write_complex_cart(tmp_path):
    ww_header = WWHeader(
        if_=1,
        iv=1,
        ni=2,
        nr=10,
        probid="06/05/21 11:33:41",
        ne=[7, 2],
        nfx=7,
        nfy=3,
        nfz=1,
        origin=[-15.0, -15.0, -15.0],
        ncx=3,
        ncy=1,
        ncz=1,
    )
    b2_vectors = Vectors(
        vector_i=np.array([-15.0, 2.0, 5.1, 1.0, 3.0, 12.2, 1.0, 2.0, 13.3, 1.0]),
        vector_j=np.array([-15.0, 3.0, 16.0, 1.0]),
        vector_k=np.array([-15.0, 1.0, 20.0, 1.0]),
    )
    energies = [[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 100.0], [1.2, 2.3]]
    values = [
        [
            0.94638e-01,
            0.79364,
            0.79103,
            0.96254e-01,
            0.40716e-01,
            0.98324e-02,
            0.65408e-02,
            0.69929,
            42.589,
            0.0000,
            0.0000,
            0.29634,
        ],
        [123, 3],
    ]

    with open(
        Path("tests") / "test_ww_gvr" / "resources" / "ww_complex_cart"
    ) as infile:
        expected = infile.read()

    write(tmp_path / "test.ww", ww_header, b2_vectors, energies, values)
    with open(tmp_path / "test.ww") as outfile:
        result = outfile.read()

    assert expected[0:680] == result[0:680]
